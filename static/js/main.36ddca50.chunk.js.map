{"version":3,"sources":["components/navbar-component/navbar.jsx","components/card-component/cardDetail.jsx","components/card-component/cardList.jsx","components/form-component/form.jsx","components/card-component/card.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","Cardcls","profile","this","props","List","Item","src","avatar_url","alt","style","borderradius","href","html_url","name","bio","repos_url","public_repos","Divider","Component","CardList","Card","Content","backgroundcolor","Header","Feed","Event","Summary","profiles","map","key","id","InpVal","state","userName","handleSubmit","event","a","preventDefault","axios","get","catch","err","message","resp","console","log","data","onSubmit","setState","type","Form","Group","Input","placeholder","value","onChange","target","Button","content","Image","curprof","wrapped","ui","company","Meta","Description","extra","Icon","followers","following","App","addNewProfile","profileData","prevState","title","Segment","Grid","columns","relaxed","Column","width","vertical","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","error"],"mappings":"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","file":"static/js/main.36ddca50.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./navbar.css\";\r\n\r\nconst Navbar = () => (\r\n  <div>\r\n    <div className=\"navbar\">Github Search</div>\r\n  </div>\r\n);\r\n\r\nexport default Navbar;\r\n","import React, { Component } from \"react\";\r\n// import \"semantic-ui-css/semantic.min.css\";\r\nimport { Image, Icon, List, Divider } from \"semantic-ui-react\";\r\nimport \"./card.css\";\r\n\r\nclass Cardcls extends Component {\r\n  render() {\r\n    const profile = this.props;\r\n    return (\r\n      <List>\r\n        <List.Item>\r\n          <div className=\"card\">\r\n            <img\r\n              className=\"image\"\r\n              src={profile.avatar_url}\r\n              alt=\"avatar\"\r\n              style={{ borderradius: \"50\" }}\r\n            />\r\n            <div className=\"info\">\r\n              <div className=\"name\">\r\n                <a href={profile.html_url}>{profile.name}</a>\r\n              </div>\r\n              <br />\r\n              <div className=\"pbio\">\r\n                <span className=\"bio\">{profile.bio}</span>\r\n                <br />\r\n                <a href={profile.repos_url}>\r\n                  Public Repositories: {profile.public_repos}\r\n                </a>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </List.Item>\r\n        <Divider />\r\n      </List>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Cardcls;\r\n","import React from \"react\";\r\nimport CardDetail from \"./cardDetail\";\r\nimport { Card, Feed } from \"semantic-ui-react\";\r\n// import \"semantic-ui-css/semantic.min.css\";\r\n\r\nconst CardList = props => (\r\n  <div className=\"CardList\">\r\n    <Card>\r\n      <Card.Content style={{ backgroundcolor: \"rgb(233, 224, 222)\" }}>\r\n        <Card.Header>Viewed Profiles</Card.Header>\r\n      </Card.Content>\r\n      <Card.Content>\r\n        <Feed>\r\n          <Feed.Event>\r\n            <Feed.Content>\r\n              <Feed.Summary>\r\n                {props.profiles.map(profile => (\r\n                  <CardDetail key={profile.id} {...profile} />\r\n                ))}\r\n              </Feed.Summary>\r\n            </Feed.Content>\r\n          </Feed.Event>\r\n        </Feed>\r\n      </Card.Content>\r\n    </Card>\r\n  </div>\r\n);\r\n\r\nexport default CardList;\r\n","import React, { Component } from \"react\";\r\n// import \"semantic-ui-css/semantic.min.css\";\r\nimport axios from \"axios\";\r\nimport { Form } from \"semantic-ui-react\";\r\nimport \"./form.css\";\r\n\r\nexport const CUR_PROF = \"curprof\";\r\n\r\nclass InpVal extends Component {\r\n  state = { userName: \"\" };\r\n  handleSubmit = async event => {\r\n    event.preventDefault();\r\n    const resp = await axios\r\n      .get(`https://api.github.com/users/${this.state.userName}`)\r\n      .catch(err => {\r\n        return err.message;\r\n      });\r\n\r\n    console.log(resp.data);\r\n    this.props.onSubmit(resp.data);\r\n    this.setState({ userName: \"\" });\r\n    return { type: CUR_PROF };\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"search\">\r\n        <Form onSubmit={this.handleSubmit}>\r\n          <Form.Group>\r\n            <Form.Input\r\n              placeholder=\"Github Username\"\r\n              name=\"github user\"\r\n              value={this.state.userName}\r\n              onChange={event =>\r\n                this.setState({ userName: event.target.value })\r\n              }\r\n            />\r\n            <Form.Button content=\"Search\" />\r\n          </Form.Group>\r\n        </Form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default InpVal;\r\n","import React, { Component } from \"react\";\r\n// import \"semantic-ui-css/semantic.min.css\";\r\nimport { Card, Icon, Image } from \"semantic-ui-react\";\r\nimport \"./card.css\";\r\n\r\nclass Cardcls extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"card\">\r\n        <Card>\r\n          <Image src={this.props.curprof.avatar_url} wrapped ui={false} />\r\n          <Card.Content>\r\n            <Card.Header>\r\n              <a href={this.props.curprof.html_url}>\r\n                {this.props.curprof.name}\r\n              </a>\r\n              <br />\r\n              <span className=\"company\">{this.props.curprof.company}</span>\r\n            </Card.Header>\r\n            <Card.Meta>\r\n              <span className=\"bio\">{this.props.curprof.bio}</span>\r\n            </Card.Meta>\r\n            <Card.Description>\r\n              <a href={this.props.curprof.repos_url}>\r\n                Public Repositories: {this.props.curprof.public_repos}\r\n              </a>\r\n            </Card.Description>\r\n          </Card.Content>\r\n          <Card.Content extra>\r\n            <Icon name=\"user\" />\r\n            {this.props.curprof.followers} Followers\r\n            <br />\r\n            <Icon name=\"user\" />\r\n            {this.props.curprof.following} Following\r\n          </Card.Content>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Cardcls;\r\n","import './App.css';\nimport React, { Component } from 'react';\nimport Navbar from './components/navbar-component/navbar';\nimport CardList from './components/card-component/cardList';\nimport CardDetail from './components/card-component/cardDetail';\nimport InpVal from './components/form-component/form';\nimport Cardcls from './components/card-component/card';\nimport { Grid, Divider, Segment, Icon } from 'semantic-ui-react'\n\n\nclass App extends Component {\n  state = {\n      curprof: {},\n      profiles: [],\n    };\n    addNewProfile = (profileData) => {\n  \tthis.setState(prevState => ({\n      curprof: profileData,\n    \tprofiles: [...prevState.profiles, profileData],\n    }));\n  };\n  render() {\n    return (\n      <div>\n      \t  <div className=\"header\">\n            {this.props.title}\n          </div>\n          <Navbar />\n          <InpVal onSubmit={this.addNewProfile} />\n          <Segment>\n\n          <Grid columns='equal' relaxed='very'>\n            <Grid.Column>\n              <Cardcls curprof={this.state.curprof} />\n            </Grid.Column>\n            <Grid.Column width={7}>\n              <CardList profiles={this.state.profiles} />\n            </Grid.Column>\n          </Grid>\n          <Divider vertical>\n            <Icon  name='github' />\n          </Divider>\n          </Segment>\n\n      \t</div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}